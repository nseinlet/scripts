#!/bin/bash
START_VERSIONS="12.0 saas-12.3"
TARGET="13.0"
MAX_THREADS=3

RED='\e[31m'
GREEN='\e[32m'
BLUE='\e[34m'
NC='\e[39m' # No Colo

REP1="odoo;git@github.com:odoo/odoo.git;addons"
REP2="enterprise;git@github.com:odoo/enterprise.git;."

base_dir="/datas/src-migrations/"

for ver in $START_VERSIONS
do
    for repo in $REP1 $REP2
    do
        dir="$(echo ${repo} | cut -d';' -f1)"
        rep="$(echo ${repo} | cut -d';' -f2)"
        addonsfolder="$(echo ${repo} | cut -d';' -f3)"
        cd "$base_dir/$dir/$ver"
        git co $ver
        git fetch origin $ver
        git rebase --autostash
        echo -e "${RED}$dir ${BLUE}$ver${NC}"
        cd $addonsfolder

        # Ensure DB to upgrade exists
        nbrthd=0
        for d in */ ; do
            nbrthd=$((nbrthd+1))
            addon=${d%/}
            src_db=$ver-upddb-$addon
            trg_db=$TARGET-$src_db
            if psql -lqt | cut -d \| -f 1 | grep -qw $src_db; then
                #DB already exists. Update module?
                echo -e "$(date "+%Y.%m.%d-%H.%M.%S") Existing DB ${RED}$dir ${BLUE}$ver ${NC}update module  ${GREEN}$addon${NC}"
                # odoo-launch $ver -d $src_db -i $addon --stop-after-init --logfile /dev/null --no-http &
            else
                echo -e "$(date "+%Y.%m.%d-%H.%M.%S") Create DB   ${RED}$dir ${BLUE}$ver ${NC}install module ${GREEN}$addon${NC}"
                #If a DB is a localisation module...
                #Install base, then change partner country, then install module as usual
                _L10N=$(echo -n "$addon" | awk -vRS=, -vFS=_ '/^l10n_/{print $2}' | sort | uniq | tr '\n' ' ')
                declare -a L10N=($_L10N)
                if [[ -n "${#L10N[@]}" ]]; then
                    odoo-launch $ver -d $src_db -i base --stop-after-init --logfile /dev/null --no-http
                    psql -d "$src_db" -c "UPDATE res_partner SET country_id = (SELECT id FROM res_country WHERE lower(code)='${L10N[0]}')" > /dev/null
                fi
                odoo-launch $ver -d $src_db -i $addon --stop-after-init --logfile /dev/null --no-http &
            fi
            dropdb $trg_db 2>/dev/null &

            if [[ "$nbrthd" -gt $((MAX_THREADS-1)) ]]; then
                # echo "Waiting $nbrthd threads"
                wait
                nbrthd=0
            fi
        done
        wait

        #Really perform DB upgrade
        nbrthd=0
        for d in */ ; do
            nbrthd=$((nbrthd+1))
            addon=${d%/}
            src_db=$ver-upddb-$addon
            trg_db=$TARGET-$src_db
            # echo -e "Upgrade DB ${GREEN}$src_db ${NC}"
            rm /tmp/upgrade-$nbrthd 2>/dev/null
            odoo-upgrade $TARGET $trg_db $src_db --stop-after-init --logfile /tmp/upgrade-$nbrthd --no-http &
            if [[ "$nbrthd" -gt $((MAX_THREADS-1)) ]]; then
                # echo "Waiting $nbrthd threads"
                wait
                nbrthd=0
                #Check migration logs
                for i in $(seq 1 $MAX_THREADS); do
                    current_time=$(date "+%Y.%m.%d-%H.%M.%S")
                    if [ -f "/tmp/upgrade-$i" ]; then
                        db="$(cat /tmp/upgrade-$i | grep "loading module base (1/1)" | cut -d " " -f 5 | head -1)"
                        if cat /tmp/upgrade-$i | grep -qw "odoo.modules.loading: Modules loaded"; then
                            echo -e "$current_time ${GREEN}Upgrade ${db} succeful${NC}"
                            rm /tmp/upgrade-$i
                        else
                            echo -e "$current_time ${RED}Upgrade ${db} error${NC}"
                            mv /tmp/upgrade-$i /tmp/upgrade-$db-$current_time
                        fi
                    fi
                done
            fi
        done
        wait

    done
    echo -e "${GREEN}Finished.${NC}"
done
